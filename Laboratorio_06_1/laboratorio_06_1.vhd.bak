library ieee;
use ieee.std_logic_1164.all;

entity Laboratorio_06_1 is
	generic (
		NUMERO_LEDS: NATURAL := 5;
		TEMPORIZACAO_MS: NATURAL := 250;
		FREQUENCIA_CLK: NATURAL := 50_000_000
	);
	port (
		leds: out STD_LOGIC_VECTOR(NUMERO_LEDS - 1 DOWNTO 0);
		clk: in STD_LOGIC
	);
end entity;

architecture Laboratorio_06_1 of Laboratorio_06_1 IS
	constant INTERRUPCAO_TEMPORIZADOR: natural := FREQUENCIA_CLK / 1000 * TEMPORIZACAO_MS;
	signal temporizacao_clk: std_logic;
	signal posicao_led:natural range 0 to NUMERO_LEDS - 1;
begin

	--Bloco - Temporizacao
	process (clk)
		variable counter:natural range 0 to INTERRUPCAO_TEMPORIZADOR;
	begin 
		if rising_edge (clk) then
			counter := counter + 1;
			
			if counter = INTERRUPCAO_TEMPORIZADOR - 1 then
				temporizacao_clk <= '1';
				counter := 0;
			else 
				temporizacao_clk <= '0';
			end if;
		end if;
	end process;
	
	-- Bloco PosicaO - VIEW
	process(temporizacao_clk)
	begin	
		if rising_edge (temporizacao_clk) then
			posicao_led <= posicao_led + 1;
			
			if posicao_led >= (NUMERO_LEDS - 1) then
				posicao_led <= 0;
			end if;
		end if;
	end process;

	-- Bloco View
	g1: for i in 0 to NUMERO_LEDS - 1 generate
		leds(i) <= '1' when i = posicao_led else
					 '0';
	end generate g1;
	
end architecture;